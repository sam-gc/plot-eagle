-*
 * Expect 128,826 bytes lost (my machine) from Valgrind.
 * This loss is due to SDL, not the Eagle ref counting code.
 *-

import ../utils/sdl.egl
import ../utils/misc.egl
import ../arithmetic/lexer.egl
import ../arithmetic/parser.egl
import ../arithmetic/functions.egl
import plot.egl

func main(int argc, byte** argv) : int
{
    if argc < 2
    {
        printf('Usage: %s <expression>\n', argv[0])
        return 0
    }

    SDL_Init(sh_init_everything())
    TTF_Init()

    WindowInfo winfo
    build_winfo(argv, &winfo)

    var screen = new Surface(winfo.width, winfo.height)
    screen.openAsWindow()

    var plot = new Plot(&winfo, screen)
    -- plot.addExpression(parse(argv[1]))

    for int i = 1; i < argc; i += 2
    {
        int ct
        var f = build_function(argv + i, &ct, &winfo)
        i += ct
        plot.addFunction(f)
    }

    if !winfo.aspect
        plot.resizeWinfo()

    plot.useFont('AnonPro.ttf')
    plot.render()

    Event event
    event.type = UserEvent
    for event.type != Quit
    {
        wait_event(&event)

        if event.type == MouseMotion
        {
            short x
            event_mouse_coords(&event, &x, nil)
            plot.mouseX = x
            plot.render()
        }
        elif event.type == ActiveEvent -- Called when mouse leaves the window
        {
            plot.mouseX = -1
            plot.render()
        }
    }

    SDL_Quit()

    return 0
}

func build_winfo(byte** args, WindowInfo* winfo)
{
    fill_winfo(winfo, 640, 480)

    for args^
    {
        var arg = args^
        if strequ(arg, '--aspect')
            winfo.aspect = yes
        if strequ(arg, '--width')
        {
            args += 1
            winfo.width = atoi(args^)
        }
        if strequ(arg, '--height')
        {
            args += 1
            winfo.height = atoi(args^)
        }

        args += 1
    }

    sanitize_winfo(winfo)
}

func build_function(byte** args, int* ct, WindowInfo* winfo) : Function^
{
    if !args^
        return nil

    Function^ f = new Function(parse(args^), winfo)
    int read = 0
    args += 1

    for args^ && !strequ(args^, '-f')
    {
        read += 1

        var arg = args^
        if strequ(arg, '--color')
        {
            args += 1
            read += 1
            byte r; byte g; byte b
            sscanf(args^, '%d,%d,%d', &r, &g, &b)
            f.color.r = r
            f.color.g = g
            f.color.b = b
        }
        elif strequ(arg, '--discreet')
            f.discreet = yes
        elif strequ(arg, '--tangent')
            f.drawTangents = yes
        elif strequ(arg, '--static')
            f.ustatic = yes

        args += 1
    }

    if ct
        ct^ = read

    return f
}


