-*
 * Expect 128,826 bytes lost (my machine) from Valgrind.
 * This loss is due to SDL, not the Eagle ref counting code.
 *-

 -- A cool plot: ./plot 1 --color 70,70,70 --static -f "-1" --color 70,70,70 --static -f "Sin(x)" --tangent --aspect --color 255,0,0 --axes-color 255,255,255 --xtick 0.78539816 --ytick 0.5 --window 1500,400 -f "Cos(x)" --tangent --color 255,255,0

 -- Another cool plot: ./plot "LogB(1.5, x)" --color 255,0,0 --tangent -f "LogB(2, x)" --tangent --color 250,136,5 -f "LogB(2.5, x)" --color 255,255,0 --tangent -f "LogB(3, x)" --tangent --color 0,255,0 -f "LogB(3.5, x)" --tangent --color 0,0,255 -f "LogB(4, x)" --color 255,0,255 --tangent --xtick 2.71828182846 --ytick 2.71828182846 --window 1360,720 --xrange -1,10 --yrange -7,6

import ../utils/sdl.egl
import ../utils/misc.egl
import ../utils/math.egl
import ../arithmetic/lexer.egl
import ../arithmetic/parser.egl
import ../arithmetic/functions.egl
import plot.egl

func main(int argc, byte** argv) : int
{
    srand(time(nil))
    if argc < 2
    {
        printf('Usage: %s <expression>\n', argv[0])
        return 0
    }

    SDL_Init(sh_init_everything())
    TTF_Init()

    WindowInfo winfo
    build_winfo(argv, &winfo)

    var screen = new Surface(winfo.width, winfo.height)
    screen.openAsWindow()

    var plot = new Plot(&winfo, screen)
    setup_plot(argv, plot)
    -- plot.addExpression(parse(argv[1]))

    for int i = 1; i < argc; i += 2
    {
        int ct
        var f = build_function(argv + i, &ct, &winfo)
        i += ct
        plot.addFunction(f)
    }

    if !winfo.aspect && !winfo.manualy
        plot.resizeWinfo()

    plot.useFont('AnonPro.ttf')
    plot.render()

    if winfo.outfile
        plot.saveToFile(winfo.outfile)

    var event = Event {
        .type = UserEvent
    }

    for event.type != Quit
    {
        wait_event(&event)

        if event.type == MouseMotion
        {
            short x
            event_mouse_coords(&event, &x, nil)
            plot.mouseX = x
            plot.render()
        }
        elif event.type == ActiveEvent -- Called when mouse leaves the window
        {
            plot.mouseX = -1
            plot.render()
        }
    }

    SDL_Quit()

    return 0
}

func build_winfo(byte** args, WindowInfo* winfo)
{
    fill_winfo(winfo, 640, 480)

    for args^
    {
        var arg = args^
        if strequ(arg, '--aspect')
            winfo.aspect = yes
        elif strequ(arg, '--window')
        {
            args += 1
            int w
            int h
            sscanf(args^, '%d,%d', &w, &h)
            winfo.width = w
            winfo.height = h
        }
        elif strequ(arg, '--xrange')
        {
            args += 1
            double n
            double x
            sscanf(args^, '%lf,%lf', &n, &x)
            winfo.xmin = n
            winfo.xmax = x
        }
        elif strequ(arg, '--yrange')
        {
            args += 1
            double n
            double x
            sscanf(args^, '%lf,%lf', &n, &x)
            winfo.ymin = n
            winfo.ymax = x
            winfo.manualy = yes
        }
        elif strequ(arg, '--render')
        {
            args += 1
            winfo.outfile = args^
        }

        args += 1
    }

    sanitize_winfo(winfo)
}

func setup_plot(byte** args, Plot^ p)
{
    for args^
    {
        var arg = args^
        if strequ(arg, '--axes-color')
        {
            args += 1
            read_color(args^, &p.axescol)
        }
        elif strequ(arg, '--bg-color')
        {
            args += 1
            read_color(args^, &p.backgcol)
        }
        elif strequ(arg, '--tangent-color')
        {
            args += 1
            read_color(args^, &p.tancol)
        }
        elif strequ(arg, '--xtick')
        {
            args += 1
            p.xtick = atof(args^)
        }
        elif strequ(arg, '--ytick')
        {
            args += 1
            p.ytick = atof(args^)
        }

        args += 1
    }
}

func build_function(byte** args, int* ct, WindowInfo* winfo) : Function^
{
    if !args^
        return nil

    Function^ f = new Function(parse(args^), winfo)
    int read = 0
    args += 1

    for args^ && !strequ(args^, '-f')
    {
        read += 1

        var arg = args^
        if strequ(arg, '--color')
        {
            args += 1
            read += 1

            read_color(args^, &f.color)
        }
        elif strequ(arg, '--discreet')
            f.discreet = yes
        elif strequ(arg, '--tangent')
            f.drawTangents = yes
        elif strequ(arg, '--static')
            f.ustatic = yes

        args += 1
    }

    if ct
        ct^ = read

    return f
}

func read_color(byte* fmt, Color* c)
{
    int r
    int g
    int b

    sscanf(fmt, '%d,%d,%d', &r, &g, &b)
    c.r = r
    c.g = g
    c.b = b
}

