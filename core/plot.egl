import ../utils/sdl.egl
import ../utils/stdlib.egl
import ../utils/math.egl
import ../utils/misc.egl
import ../utils/arraylist.egl
import ../arithmetic/functions.egl

export *

extern func __egl_print_count(any^)

class Plot
{
    WindowInfo* winfo
    Surface^ surface
    Arraylist^ functions
    int mouseX
    Color backgcol
    Color tancol
    Color axescol
    TTF_Font* font

    double xtick
    double ytick

    init(WindowInfo* winfo, Surface^ surface)
    {
        self.winfo     = winfo
        self.surface   = surface
        self.functions = new Arraylist(5)
        self.mouseX    = -1
        self.font      = nil
        self.xtick = self.ytick = -1
        
        memset(&self.backgcol, 0, sizeof(Color))
        memset(&self.tancol, 255, sizeof(Color))
        memset(&self.axescol, 150, sizeof(Color))
    }

    destruct()
    {
        if self.font
            TTF_CloseFont(self.font)
    }

    func useFont(byte* font)
    {
        byte[1000] mepath
        getbinpath(mepath, 1000)
        byte* path = malloc(strlen(mepath) + strlen(font) + 20)
        sprintf(path, '%s/fonts/%s', mepath, font)

        self.font = TTF_OpenFont(path, 11)
        free(path)
    }

    func drawAxes()
    {
        double x = 0.0
        double y = 0.0

        unmap(self.winfo, &x, &y)
        var xr = new Rect(0, short@y, self.winfo.width, 1)
        var yr = new Rect(short@x, 0, 1, self.winfo.height)

        var c = self.axescol

        self.surface.fillRect(xr, c.r, c.g, c.b, no)
        self.surface.fillRect(yr, c.r, c.g, c.b, no)

        if self.xtick >= 0
        {
            SDL_Rect r
            r.y = y - 3
            r.w = 1
            r.h = 7
            var s = self.xtick
            for double i = s; i < self.winfo.xmax; i += s
            {
                var j = i
                unmap(self.winfo, &j, nil)
                r.x = j
                self.surface.fillSDL_Rect(&r, c.r, c.g, c.b, no)
            }
            for double i = -s; i > self.winfo.xmin; i -= s
            {
                var j = i
                unmap(self.winfo, &j, nil)
                r.x = j
                self.surface.fillSDL_Rect(&r, c.r, c.g, c.b, no)
            }
        }

        if self.ytick >= 0
        {
            SDL_Rect r
            r.x = x - 3
            r.w = 7
            r.h = 1
            var s = self.ytick
            for double i = s; i < self.winfo.ymax; i += s
            {
                var j = i
                unmap(self.winfo, nil, &j)
                r.y = j
                self.surface.fillSDL_Rect(&r, c.r, c.g, c.b, no)
            }
            for double i = -s; i > self.winfo.ymin; i -= s
            {
                var j = i
                unmap(self.winfo, nil, &j)
                r.y = j
                self.surface.fillSDL_Rect(&r, c.r, c.g, c.b, no)
            }
        }
    }

    func drawCoords()
    {
        if self.mouseX < 0
            return

        int drawx = self.winfo.width - 10
        int drawy = self.winfo.height - 5

        for int i = 0; i < self.functions.count; i += 1
        {
            Function^ f = self.functions.get(i)

            if !isnan(f.values[self.mouseX]) && !f.ustatic
            {
                var y = f.values[self.mouseX]
                double x = self.mouseX
                pmap(self.winfo, &x, nil)
                byte[100] coords
                coord_print(coords, x, y)

                var c = f.color

                SDL_Surface* surf = ne_render_text(self.font, coords, c.r, c.g, c.b)
                drawx -= surf.w

                if drawx < 0
                {
                    drawx = self.winfo.width - 10 - surf.w
                    drawy -= surf.h + 5
                }

                self.surface.blit(surf, drawx, drawy - surf.h)
                drawx -= 10

                SDL_FreeSurface(surf)
            }
        }
    }

    func drawFunction(Function^ f)
    {
        SDL_Rect pt
        double last = -1

        for int x in window_x_coords(self.winfo)
        {
            double y = f.values[x]
            if isnan(y)
                continue

            unmap(self.winfo, nil, &y)
            y = round(y)
            if y > 32767 || y < -32767
                continue

            pt.x = x
            pt.y = y
            pt.w = pt.h = 1

            var c = f.color

            if last >= 0 && !f.discreet; connect_the_dots(&pt, last)
            self.surface.fillSDL_Rect(&pt, c.r, c.g, c.b, no)

            last = y
        }
    }

    func drawFunctions()
    {
        -- TODO: If we capture `self` in the closure, self will be
        -- prematurely freed... This seems to be totally messed up
        -- weak Plot^ this = self
        -* self.functions.each(func(any^ item, int idx) : bool {
            this.drawFunction(item)
            return yes
        }) *-

        for int i = 0; i < self.functions.count; i += 1
        {
            self.drawFunction(self.functions.get(i))
        }
    }

    func addExpression(Expression^ e)
    {
        self.functions.append(new Function(e, self.winfo))
    }

    func addFunction(Function^ f)
    {
        self.functions.append(f)
    }

    func resizeWinfo()
    {
        double max = (Function^@self.functions.get(0)).max()
        double min = (Function^@self.functions.get(0)).min()

        for int i = 1; i < self.functions.count; i += 1
        {
            Function^ f = self.functions.get(i)
            var fmax = f.max()
            var fmin = f.min()

            if fmax > max; max = fmax
            if fmin < min; min = fmin
        }


        self.winfo.ymax = max
        self.winfo.ymin = min

        double yoffset = 30
        pspan(self.winfo, nil, &yoffset)

        self.winfo.ymax += yoffset
        self.winfo.ymin -= yoffset
    }

    func commit()
    {
        self.surface.flip()
    }

    func drawCrossHairs()
    {
        if self.mouseX < 0
            return

        for int i = 0; i < self.functions.count; i += 1
        {
            Function^ f = self.functions.get(i)
            double y = f.values[self.mouseX]

            if isnan(y) || f.ustatic
                continue

            unmap(self.winfo, nil, &y)
            draw_crosshairs_at(self.surface, self.mouseX, y, 0, 255, 255)
        }
    }

    func drawTangents()
    {
        if self.mouseX < 0
            return

        for int i = 0; i < self.functions.count; i += 1
        {
            Function^ f = self.functions.get(i)

            if !isnan(f.values[self.mouseX]) && f.drawTangents
            {
                double x = self.mouseX
                pmap(self.winfo, &x, nil)

                var texpr = gen_tangent(f.source, x)
                var tangent = new Function(texpr, self.winfo)
                tangent.color = self.tancol
                self.drawFunction(tangent)
            }
        }
    }

    func clear()
    {
        var back = new Rect(0, 0, self.winfo.width, self.winfo.height)
        var c = self.backgcol
        self.surface.fillRect(back, c.r, c.g, c.b, no)
    }

    func saveToFile(byte* filename)
    {
        SDL_SaveBMP(self.surface.raw(), filename)
    }

    func render()
    {
        self.clear()
        self.drawAxes()
        self.drawFunctions()
        self.drawTangents()
        self.drawCrossHairs()
        self.drawCoords()
        self.commit()
    }
}

func connect_the_dots(SDL_Rect* pt, double last)
{
    if pt.y == last
        return

    double x = max(pt.y, last)
    double n = min(pt.y, last)

    pt.y = n
    pt.h = x - n
}

func draw_crosshairs_at(Surface^ s, int x, int y, byte r, byte g, byte b)
{
    SDL_Rect top
    top.x = x
    top.y = y - 5
    top.w = 1
    top.h = 5

    SDL_Rect right
    right.x = x + 1
    right.y = y
    right.w = 5
    right.h = 1

    SDL_Rect bottom
    bottom.x = x
    bottom.y = y + 1
    bottom.w = 1
    bottom.h = 5

    SDL_Rect left
    left.x = x - 5
    left.y = y
    left.w = 5
    left.h = 1

    s.fillSDL_Rect(&top, r, g, b, no)
    s.fillSDL_Rect(&right, r, g, b, no)
    s.fillSDL_Rect(&left, r, g, b, no)
    s.fillSDL_Rect(&bottom, r, g, b, no)
}

func gen_tangent(Expression^ e, double x) : Expression^
{
    var resolution = 0.0001

    var back   = e.eval(x - resolution)
    var front  = e.eval(x + resolution)
    var center = e.eval(x)

    var slope = (front - back) / (resolution * 2)
    -- y = mx + b
    -- b = y - mx

    var yint = center - slope * x
    
    var v = new Value(0.0)
    v.isvar = yes

    var mul = new BinaryOp(new Value(slope), v, Token.Mult)
    var add = new BinaryOp(mul, new Value(yint), Token.Plus)

    return add
} 
