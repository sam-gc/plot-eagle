import stdio.egl
import ../arithmetic/expressions.egl

export *

extern func fabs(double) : double

struct WindowInfo
{
    double xmin; double xmax
    double ymin; double ymax

    double width; double height
}

func pprint(double d)
{
    if d != 0.0 && (fabs(d) > 1.0e9 || fabs(d) < 1.0e-4)
        printf('%.8e\n', d)
    else
        printf('%lf\n', d)
}

func pmap(WindowInfo* winfo, double* x, double* y)
{
    if x
    {
        var old = x^
        var perc = old / winfo.width
        var span = (winfo.xmax - winfo.xmin) * perc
        x^ = winfo.xmin + span
    }
    
    if y
    {
        var old = y^
        var perc = old / winfo.height
        var span = (winfo.ymax - winfo.ymin) * perc
        y^ = winfo.ymin + span
    }
}

func pspan(WindowInfo* winfo, double* spanX, double* spanY)
{
    if spanX
    {
        var old = spanX^
        var perc = old / winfo.width
        var dif = (winfo.xmax - winfo.xmin) * perc
        spanX^ = dif
    }

    if spanY
    {
        var old = spanY^
        var perc = old / winfo.height
        var dif = (winfo.ymax - winfo.ymin) * perc
        spanY^ = dif
    }
}

func unmap(WindowInfo* winfo, double* x, double* y)
{
    if x
    {
        var old = x^
        var perc = (old - winfo.xmin) / (winfo.xmax - winfo.xmin)
        x^ = winfo.width * perc
    }

    if y
    {
        var old = y^
        var perc = (old - winfo.ymin) / (winfo.ymax - winfo.ymin)
        y^ = winfo.height - winfo.height * perc
    }
}

func fill_winfo(WindowInfo* winfo, double width, double height)
{
    winfo.xmin = -17
    winfo.xmax = 10
    winfo.ymin = -20
    winfo.ymax = 20
    winfo.height = height
    winfo.width = width
}

gen window_x_coords(WindowInfo* winfo) : int
{
    for int i = 0; i < winfo.width; i+= 1
    {
        yield i
    }
}

func min(double a, double b) : double
{
    if a < b
        return a
    return b
}

func max(double a, double b) : double
{
    if a > b
        return a
    return b
}

