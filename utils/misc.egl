import stdio.egl
import string.egl
import math.egl
import ../arithmetic/expressions.egl

export *

extern func ne_binary_path(byte*, int)

struct WindowInfo
{
    double xmin; double xmax
    double ymin; double ymax

    double width; double height

    bool aspect
}

func print_exponent(double d) : bool
{
    return d != 0.0 && (fabs(d) > 1.0e9 || fabs(d) < 1.0e-4)
}

func pprint(double d)
{
    if print_exponent(d)
        printf('%.8e\n', d)
    else
        printf('%lf\n', d)
}

func coord_print(byte* buf, double x, double y)
{
    byte* fmt = nil
    if print_exponent(x) && print_exponent(y)
        fmt = '(%e, %e)'
    elif print_exponent(x)
        fmt = '(%e, %lf)'
    elif print_exponent(y)
        fmt = '(%lf, %e)'
    else
        fmt = '(%lf, %lf)'

    sprintf(buf, fmt, x, y)
}

func pmap(WindowInfo* winfo, double* x, double* y)
{
    if x
    {
        var old = x^
        var perc = old / winfo.width
        var span = (winfo.xmax - winfo.xmin) * perc
        x^ = winfo.xmin + span
    }
    
    if y
    {
        var old = y^
        var perc = old / winfo.height
        var span = (winfo.ymax - winfo.ymin) * perc
        y^ = winfo.ymin + span
    }
}

func pspan(WindowInfo* winfo, double* spanX, double* spanY)
{
    if spanX
    {
        var old = spanX^
        var perc = old / winfo.width
        var dif = (winfo.xmax - winfo.xmin) * perc
        spanX^ = dif
    }

    if spanY
    {
        var old = spanY^
        var perc = old / winfo.height
        var dif = (winfo.ymax - winfo.ymin) * perc
        spanY^ = dif
    }
}

func unmap(WindowInfo* winfo, double* x, double* y)
{
    if x
    {
        var old = x^
        var perc = (old - winfo.xmin) / (winfo.xmax - winfo.xmin)
        x^ = winfo.width * perc
    }

    if y
    {
        var old = y^
        var perc = (old - winfo.ymin) / (winfo.ymax - winfo.ymin)
        y^ = winfo.height - winfo.height * perc
    }
}

func fill_winfo(WindowInfo* winfo, double width, double height)
{
    winfo.xmin = -15
    winfo.xmax = 15
    winfo.ymin = -15
    winfo.ymax = 15
    winfo.height = height
    winfo.width = width
    winfo.aspect = no
}

func sanitize_winfo(WindowInfo* winfo)
{
    if !winfo.aspect
        return

    var xwidth = winfo.xmax - winfo.xmin
    var ratio = winfo.width / winfo.height

    var yheight = xwidth / ratio
    winfo.ymin = -yheight / 2
    winfo.ymax = yheight / 2
}

gen window_x_coords(WindowInfo* winfo) : int
{
    for int i = 0; i < winfo.width; i+= 1
    {
        yield i
    }
}

func min(double a, double b) : double
{
    if a < b
        return a
    return b
}

func max(double a, double b) : double
{
    if a > b
        return a
    return b
}

func strequ(byte* a, byte* b) : bool
{
    return !strcmp(a, b)
}

func getbinpath(byte* buf, int len)
{
    ne_binary_path(buf, len)
    var len = strlen(buf)

    int i
    for i = len; buf[i] != `/`; i -= 1 { 0; }

    buf[i] = 0
}

