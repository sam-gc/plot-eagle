import misc.egl

export *

typedef any TTF_Font

extern func SDL_Init(int)
extern func SDL_SetVideoMode(int, int, int, int) : SDL_Surface*
extern func SDL_Flip(SDL_Surface*)
extern func SDL_Delay(int)
extern func SDL_FreeSurface(any*)
extern func SDL_Quit()
extern func SDL_FillRect(any*, any*, int) : int
extern func SDL_MapRGB(any*, byte, byte, byte) : int
extern func SDL_WaitEvent(any*) : int
extern func SDL_UpperBlit(any*, any*, any*, any*)
extern func SDL_SaveBMP_RW(SDL_Surface*, any*, int) : int
extern func SDL_RWFromFile(byte*, byte*) : any*
extern func TTF_Init() : int
extern func TTF_OpenFont(byte*, int) : TTF_Font*
extern func TTF_CloseFont(TTF_Font*)
extern func ne_render_text(TTF_Font*, byte*, byte, byte, byte) : SDL_Surface*

struct SDL_Surface
{
    int flags
    any* format
    int w; int h
    short pitch
    any* pixels
    int offset
}

struct SDL_Rect
{
    short x
    short y
    short w
    short h
}

class Rect
{
    short x
    short y
    short w
    short h

    init(short x, short y, short w, short h)
    {
        self.x = x
        self.y = y
        self.w = w
        self.h = h
    }

    func raw() : any*
    {
        return any* @ (&(unwrap self).x)
    }
}

class Surface
{
    SDL_Surface* surf
    int w
    int h

    init(int w, int h)
    {
        self.w = w
        self.h = h
        self.surf = nil
    }

    func raw() : SDL_Surface*
    {
        return self.surf
    }

    func saveToFile(byte* file)
    {
        SDL_SaveBMP(self.surf, file)
    }

    func openAsWindow()
    {
        self.surf = SDL_SetVideoMode(self.w, self.h, 32, sh_hw_surface())
    }

    func fillRect(Rect^ rect, byte r, byte g, byte b, bool flip)
    {
        self.fillSDL_Rect(rect.raw(), r, g, b, flip)
    }

    func fillSDL_Rect(SDL_Rect* rect, byte r, byte g, byte b, bool flip)
    {
        int col = SDL_MapRGB(self.surf.format, r, g, b)
        SDL_FillRect(self.surf, rect, col)

        if flip
            SDL_Flip(self.surf)
    }

    func clear(bool flip)
    {
        var rect = SDL_Rect {
            .x = 0
            .y = 0
            .w = self.w
            .h = self.h
        }

        SDL_FillRect(self.surf, &rect, SDL_MapRGB(self.surf.format, 0, 0, 0))
        if flip
            SDL_Flip(self.surf)
    }

    func blit(SDL_Surface* surf, int x, int y)
    {
        var dstr = SDL_Rect {
            .x = x
            .y = y
            .w = 0
            .h = 0
        }

        SDL_UpperBlit(surf, nil, self.surf, &dstr)
    }

    func flip()
    {
        SDL_Flip(self.surf)
    }
}

struct Color
{
    byte r
    byte g
    byte b
}

struct Event
{
    EventType type
    byte[250] buffer
}

enum EventType
{
    NoEvent
    ActiveEvent
    KeyDown
    KeyUp
    MouseMotion
    MouseButtonDown
    MouseButtonUp
    JoyAxisMotion
    JoyBallMotion
    JoyHatMotion
    JoyButtonDown
    JoyButtonUp
    Quit
    SysWMEvent
    ReservedA
    ReservedB
    VideoResize
    VideoExpose
    UserEvent : 24
    NumEvents : 32
}

func sh_init_everything() : int
{
    return 65535
}

func sh_hw_surface() : int
{
    return 1
}

func wait_event(Event* e)
{
    SDL_WaitEvent(e.buffer)
    e.type = EventType@e.buffer[0]
}

func event_mouse_coords(Event* e, short* x, short* y)
{
    byte[2] buf
    short* bref = any*@(&buf[0])
    if x
    {
        buf[0] = e.buffer[4]
        buf[1] = e.buffer[5]

        x^ = bref^
    }
    
    if y
    {
        buf[0] = e.buffer[6]
        buf[1] = e.buffer[7]

        y^ = bref^
    }
}

func SDL_SaveBMP(SDL_Surface* s, byte* name)
{
    SDL_SaveBMP_RW(s, SDL_RWFromFile(name, 'wb'), 1)
}

