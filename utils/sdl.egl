export *

extern func SDL_Init(int)
extern func SDL_SetVideoMode(int, int, int, int) : SDL_Surface*
extern func SDL_Flip(SDL_Surface*)
extern func SDL_Delay(int)
extern func SDL_FreeSurface(any*)
extern func SDL_Quit()
extern func SDL_FillRect(any*, any*, int) : int
extern func SDL_MapRGB(any*, byte, byte, byte) : int

struct SDL_Surface
{
    int flags
    any* format
    int w; int h
    short pitch
    any* pixels
    int offset
}

struct SDL_Rect
{
    short x
    short y
    short w
    short h
}

class Rect
{
    short x
    short y
    short w
    short h

    init(short x, short y, short w, short h)
    {
        self^.x = x
        self^.y = y
        self^.w = w
        self^.h = h
    }

    func raw() : any*
    {
        return any* @ (&(unwrap self)^.x)
    }
}

class Surface
{
    SDL_Surface* surf
    int w
    int h

    init(int w, int h)
    {
        self^.w = w
        self^.h = h
        self^.surf = nil
    }

    func raw() : SDL_Surface*
    {
        return self^.surf
    }

    func openAsWindow()
    {
        self^.surf = SDL_SetVideoMode(self^.w, self^.h, 32, sh_hw_surface())
    }

    func fillRect(Rect^ rect, byte r, byte g, byte b, bool flip)
    {
        self^.fillSDL_Rect(rect^.raw(), r, g, b, flip)
    }

    func fillSDL_Rect(SDL_Rect* rect, byte r, byte g, byte b, bool flip)
    {
        int col = SDL_MapRGB(self^.surf^.format, r, g, b)
        SDL_FillRect(self^.surf, rect, col)

        if flip
            SDL_Flip(self^.surf)
    }

    func clear(bool flip)
    {
        SDL_Rect rect
        rect.x = rect.y = 0
        rect.w = self^.w
        rect.h = self^.h

        SDL_FillRect(self^.surf, &rect, SDL_MapRGB(self^.surf^.format, 0, 0, 0))
        if flip
            SDL_Flip(self^.surf)
    }

    func flip()
    {
        SDL_Flip(self^.surf)
    }
}

struct SDL_Color
{
    byte r
    byte g
    byte b
    byte unused
}

func sh_init_everything() : int
{
    return 65535
}

func sh_hw_surface() : int
{
    return 1
}

