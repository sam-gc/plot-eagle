import lexer.egl

export (class) '*'
export (struct) '*'

extern func __egl_print_count(any^)

class TokenStack
{
    Token* buffer
    int count
    int alloced

    init()
    {
        self.alloced = 10
        self.count = 0
        self.buffer = malloc(sizeof(Token) * self.alloced)
    }

    destruct()
    {
        free(self.buffer)
    }

    func push(Token t)
    {
        if self.alloced == self.count
        {
            self.alloced += 10
            self.buffer = realloc(self.buffer, sizeof(Token) * self.alloced)
        }

        self.buffer[self.count] = t
        self.count += 1
    }

    func pop() : Token
    {
        if self.count == 0
            return Invalid

        var t = self.buffer[self.count - 1]
        self.count -= 1
        return t
    }

    func top() : Token
    {
        if self.count == 0
            return Invalid

        return self.buffer[self.count - 1]
    }
}

class PointerStack
{
    PointerStackNode^ head
    int count

    init()
    {
        self.count = 0
    }

    func push(any^ val)
    {
        var node = new PointerStackNode({
            .val  = val
            .next = self.head
        })

        self.head = node
        self.count += 1
    }

    func pop() : any^
    {
        if self.count == 0
            return nil

        self.count -= 1
        var ref = self.head.val

        self.head = self.head.next

        return ref
    }

    func get(int i) : any^
    {
        if i >= self.count
            return nil

        var node = self.head
        for int j = 0; j < i; j += 1
        {
            node = node.next
        }

        return node.val
    }
}

struct PointerStackNode
{
    PointerStackNode^ next
    any^ val
}

