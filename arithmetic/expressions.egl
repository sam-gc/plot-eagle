import lexer.egl
export *

extern func pow(double, double) : double

interface Expression
{
    func eval(double) : double
    func render() : byte*
}

class UnaryOp(Expression)
{
    Expression^ value

    Token op

    init(Expression^ value, Token op)
    {
        self^.value = value
        self^.op = op
    }

    func eval(double x) : double
    {
        double v = self^.value^.eval(x)
        Token op = self^.op

        if op == UMinus; return 0-v
        return 0
    }

    func render() : byte*
    {
        var v = self^.value^.render()
        byte b = 0
        var op = self^.op
        if op == UMinus; b = `-`

        byte* me = malloc(strlen(v) + 10)
        sprintf(me, '%c%s', b, v)

        free(v)
        return me
    }
}

class BinaryOp (Expression)
{
    Expression^ left
    Expression^ right

    Token op

    init(Expression^ left, Expression^ right, Token op)
    {
        self->left = left
        self->right = right
        self->op = op
    }

    func eval(double x) : double
    {
        double l = self^.left->eval(x)
        double r = self^.right->eval(x)
        Token op = self^.op

        if op == Plus; return l + r
        if op == Minus; return l - r
        if op == Mult; return l * r
        if op == Div; return l / r
        if op == Pow; return pow(l, r)

        return 0.0
    }

    func render() : byte*
    {
        var l = self^.left^.render()
        var r = self^.right^.render()

        byte b = 0
        var op = self^.op
        if op == Plus; b = `+`
        if op == Minus; b = `-`
        if op == Mult; b = `*`
        if op == Div; b = `/`

        byte* me = malloc(strlen(l) + strlen(r) + 10)
        sprintf(me, '(%s %c %s)', l, b, r)

        free(l)
        free(r)
        return me
    }
}

class Value (Expression)
{
    double val
    bool   isvar

    init(double val)
    {
        self->val = val
        self->isvar = no
    }

    func eval(double x) : double
    {
        if self->isvar
            return x
        return self->val
    }

    func render() : byte*
    {
        byte* mem = malloc(20)
        sprintf(mem, '%lf', self->val)
        return mem
    }
}

