import ../utils/stdlib.egl
import ../utils/misc.egl
import ../utils/sdl.egl
import ../utils/math.egl
import expressions.egl
export *

class Function
{
    double*     values
    int         vcount
    bool        discreet
    bool        ustatic
    Expression^ source
    Color       color
    double      firstNonNan

    init(Expression^ e, WindowInfo* winfo)
    {
        self.values = malloc(winfo.width * sizeof(double))
        self.vcount = winfo.width
        self.discreet = no
        self.ustatic  = no
        self.firstNonNan = 0

        var hasFoundNonNan = no

        for var i = 0; i < winfo.width; i += 1
        {
            double x = i
            pmap(winfo, &x, nil)
            self.values[i] = e.eval(x)

            if !isnan(self.values[i]) && !hasFoundNonNan
            {
                hasFoundNonNan = yes
                self.firstNonNan = self.values[i]
            }
        }

        self.source = e
        self.color.r = self.color.g = self.color.b = 255
    }

    destruct()
    {
        free(self.values)
    }

    func max() : double
    {
        double max = self.firstNonNan
        for var i = 1; i < self.vcount; i += 1
        {
            if isnan(self.values[i])
                continue

            if self.values[i] > max
                max = self.values[i]
        }

        return max
    }

    func min() : double
    {
        double min = self.firstNonNan
        for var i = 1; i < self.vcount; i += 1
        {
            if isnan(self.values[i])
                continue

            if self.values[i] < min
                min = self.values[i]
        }

        return min
    }
}

