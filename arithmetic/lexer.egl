export *

import ../utils/stdlib.egl
import ../utils/stdio.egl
import ../utils/string.egl

enum LexerStatus
{
    Valid
    Error
    Finished
}

enum Token
{
    Identifier
    Number
    BracketL
    BracketR
    ParenL
    ParenR
    Mult
    Div
    Plus
    Minus         -* Infix subtraction operator *-
    UMinus        -* Prefix negation operator   *-
    Pow
    End
    Invalid
    Sentinel
}

class Lexer
{
    byte* src
    int pos
    byte* buffer
    LexerStatus status
    Token prev

    init(byte* src)
    {
        self->src = strdup(src)
        self->pos = 0
        self->status = Valid
        self->buffer = malloc(1000)
        self->prev = Invalid
    }

    destruct()
    {
        free(self->buffer)
        free(self->src)
    }

    func c() : byte
    {
        return self->src[self->pos]
    }

    func valid() : bool
    {
        return self->status == Valid
    }

    func bump()
    {
        self->pos += 1
        if self->c() == 0
            self->status = Finished
    }

    func handleSimpleToken() : Token
    {
        byte c = self->c()
        self->buffer[0] = c
        self->buffer[1] = 0
        self->bump()

        if c == `-`
        {
            if is_binary_operator(self->prev) || self->prev == ParenL ||
                                                 self->prev == Invalid ||
                                                 self->prev == UMinus
            {
                return UMinus
            }
        }

        return map_simple_token(c)
    }

    func handleNumber() : Token
    {
        int start = self->pos
        bool seen_dot = no
        bool seen_e   = no
        byte last = ` `
        for self->valid() && (is_digit(self->c()) ||
                             (self->c() == `.` && !seen_dot) ||
                             (self->c() == `e` && !seen_e) ||
                             (self->c() == `-` && last == `e`))
        {
            if   self->c() == `.`; seen_dot = yes
            elif self->c() == `e`; seen_e   = yes
            
            last = self->c()
            self->bump()
        }

        int len = self->pos - start
        memcpy(self->buffer, self->src + start, len)
        self->buffer[len] = 0

        return Number
    }

    func handleIdentifier() : Token
    {
        int start = self->pos
        for self->valid() && (is_digit(self->c()) || is_alpha(self->c()))
        {
            self->bump()
        }

        int len = self->pos - start
        memcpy(self->buffer, self->src + start, len)
        self->buffer[len] = 0

        return Identifier
    }

    func next() : Token
    {
        for self->valid() && is_white(self->c())
        {
            self->bump()
        }

        if !self->valid()
            return End

        if is_simple_token(self->c())
        {
            return (self->prev = self->handleSimpleToken())
        }

        if is_digit(self->c()) || self->c() == `.`
        {
            return (self->prev = self->handleNumber())
        }

        if is_alpha(self->c())
        {
            return (self->prev = self->handleIdentifier())
        }
        
        self->status = Error
        return Invalid
    }
}

func is_simple_token(byte c) : bool
{
    if c == `[` || c == `]`
        return yes
    if c == `(` || c == `)`
        return yes
    if c == `+` || c == `-`
        return yes
    if c == `*` || c == `/`
        return yes
    if c == `^`
        return yes

    return no
}

func is_white(byte c) : bool
{
    return c == ` `
}

func is_digit(byte c) : bool
{
    return c >= `0` && c <= `9`
}

func is_alpha(byte c) : bool
{
    if c >= `a` && c <= `z`
        return yes
    return c >= `A` && c <= `Z`
}

func is_binary_operator(Token t) : bool
{
    if t == Plus || t == Minus
        return yes
    if t == Mult || t == Div
        return yes
    if t == Pow
        return yes
    return no
}

func is_unary_operator(Token t) : bool
{
    if t == UMinus
        return yes
    return no
}

func map_simple_token(byte c) : Token
{
    if c == `[`; return BracketL
    if c == `]`; return BracketR
    if c == `(`; return ParenL
    if c == `)`; return ParenR
    if c == `+`; return Plus
    if c == `-`; return Minus
    if c == `*`; return Mult
    if c == `/`; return Div
    if c == `^`; return Pow
    return Invalid
}

